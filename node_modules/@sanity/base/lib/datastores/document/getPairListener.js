"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPairListener = getPairListener;

var _client = _interopRequireDefault(require("part:@sanity/base/client"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function fetchDocumentSnapshots(_ref) {
  var publishedId = _ref.publishedId,
      draftId = _ref.draftId;
  return _client.default.observable.getDocuments([draftId, publishedId]).pipe((0, _operators.map)((_ref2) => {
    var _ref3 = _slicedToArray(_ref2, 2),
        draft = _ref3[0],
        published = _ref3[1];

    return {
      draft,
      published
    };
  }));
}

function createSnapshotEvent(documentId, document) {
  return {
    type: 'snapshot',
    documentId: documentId,
    document
  };
}

function getPairListener(idPair) {
  var publishedId = idPair.publishedId,
      draftId = idPair.draftId;
  return (0, _rxjs.defer)(() => _client.default.observable.listen("*[_id == $publishedId || _id == $draftId]", {
    publishedId,
    draftId
  }, {
    includeResult: false,
    events: ['welcome', 'mutation', 'reconnect']
  })).pipe((0, _operators.concatMap)(event => event.type === 'welcome' ? fetchDocumentSnapshots({
    publishedId,
    draftId
  }).pipe((0, _operators.concatMap)(snapshots => [createSnapshotEvent(draftId, snapshots.draft), createSnapshotEvent(publishedId, snapshots.published)])) : (0, _rxjs.of)(event)));
}