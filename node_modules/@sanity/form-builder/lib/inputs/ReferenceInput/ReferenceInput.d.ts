import React from 'react';
import SearchableSelect from 'part:@sanity/components/selects/searchable';
import PatchEvent from '../../../PatchEvent';
import { Reference, Type, Marker } from '../../typedefs';
import { ObservableI } from '../../typedefs/observable';
declare type SearchHit = {
    _id: string;
    _type: string;
};
declare type PreviewSnapshot = {
    title: string;
    description: string;
};
export declare type Props = {
    value?: Reference;
    type: Type;
    markers: Array<Marker>;
    readOnly?: boolean;
    onSearch: (query: string, type: Type) => ObservableI<Array<SearchHit>>;
    getPreviewSnapshot: (Reference: any, Type: any) => ObservableI<PreviewSnapshot>;
    onChange: (event: PatchEvent) => void;
    level: number;
};
declare type State = {
    isFetching: boolean;
    hits: Array<SearchHit>;
    isMissing: boolean;
    previewSnapshot: PreviewSnapshot | null;
    refCache: {
        [key: string]: SearchHit;
    };
};
export default class ReferenceInput extends React.Component<Props, State> {
    _lastQuery: string;
    _input: SearchableSelect;
    state: State;
    subscriptions: {
        add: (key: any, subscription: any) => void;
        replace: (key: any, subscription: any) => void;
        unsubscribe: (key: any) => void;
        unsubscribeAll: () => void;
    };
    componentWillUnmount(): void;
    componentDidMount(): void;
    UNSAFE_componentWillReceiveProps(nextProps: Props): void;
    getPreviewSnapshot(value: Reference): void;
    getMemberTypeFor(typeName: string): any;
    handleFocus: () => void;
    handleChange: (item: SearchHit) => void;
    handleFixWeak: () => void;
    handleClear: () => void;
    handleSearch: (query: string) => void;
    handleOpen: () => void;
    search: (query: string) => void;
    renderHit: (item: SearchHit) => JSX.Element;
    renderOpenItemElement: () => JSX.Element;
    focus(): void;
    setInput: (input?: SearchableSelect) => void;
    render(): JSX.Element;
}
export {};
