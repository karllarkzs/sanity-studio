/// <reference types="lodash" />
import PropTypes from 'prop-types';
import React from 'react';
import PatchEvent from '../PatchEvent';
declare type State = {
    isLoading: boolean;
    isSaving: boolean;
    value: any | null;
    deletedSnapshot: any | null;
};
declare type Props = {
    documentId: string;
    typeName: string;
    schema: Record<string, any>;
    children: React.ComponentType<any>;
};
declare type WithFormBuilderValueState = State & {
    deletedSnapshot: any;
    value: any;
} & State;
export default class WithFormBuilderValue extends React.PureComponent<Props, WithFormBuilderValueState> {
    document: Record<string, any>;
    static childContextTypes: {
        formBuilder: PropTypes.Requireable<object>;
    };
    subscriptions: {
        add: (key: any, subscription: any) => void;
        replace: (key: any, subscription: any) => void;
        unsubscribe: (key: any) => void;
        unsubscribeAll: () => void;
    };
    state: State;
    patchChannel: {
        onPatch: any;
        receivePatches: any;
    };
    checkoutDocument(documentId: string): void;
    handleDocumentEvent: (event: {
        type: string;
        document: any;
    }) => void;
    componentWillUnmount(): void;
    UNSAFE_componentWillMount(): void;
    UNSAFE_componentWillReceiveProps(nextProps: Props): void;
    handleIncomingMutationEvent(event: any): void;
    commit: (() => void) & import("lodash").Cancelable;
    handleChange: (event: PatchEvent) => void;
    handleDelete: () => void;
    handleCreate: (document: any) => void;
    render(): JSX.Element;
}
export {};
