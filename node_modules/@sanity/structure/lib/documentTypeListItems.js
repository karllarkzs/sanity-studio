"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDocumentTypeListItems = getDocumentTypeListItems;
exports.getDocumentTypeListItem = getDocumentTypeListItem;
exports.getDocumentTypeList = getDocumentTypeList;
exports.DEFAULT_INTENT_HANDLER = void 0;

var _memoizeOne = _interopRequireDefault(require("memoize-one"));

var _Schema = require("./parts/Schema");

var _DataAspects = require("./parts/DataAspects");

var _Icon = require("./parts/Icon");

var _MenuItem = require("./MenuItem");

var _Sort = require("./Sort");

var _ListItem = require("./ListItem");

var _Editor = require("./Editor");

var _documentActionUtils = require("./parts/documentActionUtils");

var _DocumentTypeList = require("./DocumentTypeList");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PlusIcon = (0, _Icon.getPlusIcon)();
var ListIcon = (0, _Icon.getListIcon)();
var DetailsIcon = (0, _Icon.getDetailsIcon)();
var getDataAspectsForSchema = (0, _memoizeOne.default)(_DataAspects.dataAspects);
var DEFAULT_INTENT_HANDLER = Symbol('Document type list canHandleIntent');
exports.DEFAULT_INTENT_HANDLER = DEFAULT_INTENT_HANDLER;

function shouldShowIcon(schemaType) {
  var preview = schemaType.preview;
  return Boolean(preview && (preview.prepare || preview.select && preview.select.media));
}

function getDocumentTypeListItems() {
  var schema = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _Schema.defaultSchema;
  var resolver = getDataAspectsForSchema(schema);
  var types = resolver.getDocumentTypes();
  return types.map(typeName => getDocumentTypeListItem(typeName, schema));
}

function getDocumentTypeListItem(typeName) {
  var schema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Schema.defaultSchema;
  var type = schema.get(typeName);

  if (!type) {
    throw new Error("Schema type with name \"".concat(typeName, "\" not found"));
  }

  var resolver = getDataAspectsForSchema(schema);
  var title = resolver.getDisplayName(typeName);
  return new _ListItem.ListItemBuilder().id(typeName).title(title).schemaType(type).child(getDocumentTypeList(typeName, schema));
}

function getDocumentTypeList(typeName) {
  var schema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Schema.defaultSchema;
  var type = schema.get(typeName);

  if (!type) {
    throw new Error("Schema type with name \"".concat(typeName, "\" not found"));
  }

  var resolver = getDataAspectsForSchema(schema);
  var title = resolver.getDisplayName(typeName);
  var showIcons = shouldShowIcon(type);
  var canCreate = (0, _documentActionUtils.isActionEnabled)(type, 'create');

  var intentChecker = (intentName, params) => Boolean(intentName === 'edit' && params && params.id && params.type === typeName) || Boolean(intentName === 'create' && params && params.type === typeName);

  intentChecker.identity = DEFAULT_INTENT_HANDLER;
  return new _DocumentTypeList.DocumentTypeListBuilder().id(typeName).title(title).filter('_type == $type').params({
    type: typeName
  }).schemaType(type).showIcons(showIcons).defaultOrdering(_Sort.DEFAULT_SELECTED_ORDERING_OPTION.by).menuItemGroups([{
    id: 'sorting',
    title: 'Sort'
  }, {
    id: 'layout',
    title: 'Layout'
  }, {
    id: 'actions',
    title: 'Actions'
  }]).child(documentId => new _Editor.EditorBuilder().id('editor').schemaType(type).documentId(documentId)).canHandleIntent(intentChecker).menuItems([// Create new (from action button)
  ...(canCreate ? [new _MenuItem.MenuItemBuilder().title("Create new ".concat(title)).icon(PlusIcon).intent({
    type: 'create',
    params: {
      type: typeName
    }
  }).showAsAction({
    whenCollapsed: true
  })] : []), // Sort by <Y>
  ...(0, _MenuItem.getOrderingMenuItemsForSchemaType)(type), // Display as <Z>
  new _MenuItem.MenuItemBuilder().group('layout').title('List').icon(ListIcon).action('setLayout').params({
    layout: 'default'
  }), new _MenuItem.MenuItemBuilder().group('layout').title('Details').icon(DetailsIcon).action('setLayout').params({
    layout: 'detail'
  }), // Create new (from menu)
  ...(canCreate ? [new _MenuItem.MenuItemBuilder().group('actions').title('Create newâ€¦').icon(PlusIcon).intent({
    type: 'create',
    params: {
      type: typeName
    }
  })] : [])]);
}