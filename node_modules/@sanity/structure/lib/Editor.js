"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EditorBuilder = void 0;

var _camelCase2 = _interopRequireDefault(require("lodash/camelCase"));

var _SerializeError = require("./SerializeError");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class EditorBuilder {
  constructor(spec) {
    _defineProperty(this, "spec", void 0);

    this.spec = spec ? spec : {};
  }

  id(id) {
    return this.clone({
      id
    });
  }

  getId() {
    return this.spec.id;
  }

  title(title) {
    return this.clone({
      title,
      id: this.spec.id || (0, _camelCase2.default)(title)
    });
  }

  getTitle() {
    return this.spec.title;
  }

  documentId(documentId) {
    return this.clone({
      options: _objectSpread({}, this.spec.options || {}, {
        id: documentId
      })
    });
  }

  getDocumentId() {
    return this.spec.options && this.spec.options.id;
  }

  schemaType(documentType) {
    return this.clone({
      options: _objectSpread({}, this.spec.options || {}, {
        type: typeof documentType === 'string' ? documentType : documentType.name
      })
    });
  }

  getSchemaType() {
    return this.spec.options && this.spec.options.type;
  }

  serialize() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      path: []
    },
        path = _ref.path,
        index = _ref.index,
        hint = _ref.hint;

    var _this$spec = this.spec,
        id = _this$spec.id,
        options = _this$spec.options;

    if (typeof id !== 'string' || !id) {
      throw new _SerializeError.SerializeError('`id` is required for editor nodes', path, index, hint).withHelpUrl(_SerializeError.HELP_URL.ID_REQUIRED);
    }

    if (!options || !options.id) {
      throw new _SerializeError.SerializeError('document id (`id`) is required for editor nodes', path, id, hint).withHelpUrl(_SerializeError.HELP_URL.DOCUMENT_ID_REQUIRED);
    }

    return _objectSpread({}, this.spec, {
      id,
      type: 'document',
      options: {
        id: options.id,
        type: options.type
      }
    });
  }

  clone() {
    var withSpec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var builder = new EditorBuilder();

    var options = _objectSpread({}, this.spec.options || {}, {}, withSpec.options || {});

    builder.spec = _objectSpread({}, this.spec, {}, withSpec, {
      options
    });
    return builder;
  }

}

exports.EditorBuilder = EditorBuilder;