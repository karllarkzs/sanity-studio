"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentListBuilder = void 0;

var _Client = require("./parts/Client");

var _Editor = require("./Editor");

var _SerializeError = require("./SerializeError");

var _GenericList = require("./GenericList");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var resolveTypeForDocument = id => {
  var query = '*[_id in [$documentId, $draftId]]._type';
  var documentId = id.replace(/^drafts\./, '');
  var draftId = "drafts.".concat(documentId);
  return _Client.client.fetch(query, {
    documentId,
    draftId
  }).then(types => types[0]);
};

var validateFilter = (spec, options) => {
  var filter = spec.options.filter.trim();

  if (['*', '{'].includes(filter[0])) {
    throw new _SerializeError.SerializeError("`filter` cannot start with `".concat(filter[0], "` - looks like you are providing a query, not a filter"), options.path, spec.id, spec.title).withHelpUrl(_SerializeError.HELP_URL.QUERY_PROVIDED_FOR_FILTER);
  }

  return filter;
};

var resolveEditorChildForItem = (itemId, options) => {
  var parentItem = options.parent;
  return Promise.resolve(parentItem.schemaTypeName || resolveTypeForDocument(itemId)).then(type => new _Editor.EditorBuilder().id('editor').documentId(itemId).schemaType(type || ''));
};

class DocumentListBuilder extends _GenericList.GenericListBuilder {
  constructor(spec) {
    super();

    _defineProperty(this, "spec", void 0);

    this.spec = spec ? spec : {};
  }

  filter(filter) {
    return this.clone({
      options: _objectSpread({}, this.spec.options || {}, {
        filter
      })
    });
  }

  getFilter() {
    return this.spec.options && this.spec.options.filter;
  }

  schemaType(type) {
    return this.clone({
      schemaTypeName: typeof type === 'string' ? type : type.name
    });
  }

  getSchemaType() {
    return this.spec.schemaTypeName;
  }

  params(params) {
    return this.clone({
      options: _objectSpread({}, this.spec.options || {
        filter: ''
      }, {
        params
      })
    });
  }

  getParams() {
    return this.spec.options && this.spec.options.params;
  }

  defaultOrdering(ordering) {
    if (!Array.isArray(ordering)) {
      throw new Error('`defaultOrdering` must be an array of order clauses');
    }

    return this.clone({
      options: _objectSpread({}, this.spec.options || {
        filter: ''
      }, {
        defaultOrdering: ordering
      })
    });
  }

  getDefaultOrdering() {
    return this.spec.options && this.spec.options.defaultOrdering;
  }

  serialize() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      path: []
    };

    if (typeof this.spec.id !== 'string' || !this.spec.id) {
      throw new _SerializeError.SerializeError('`id` is required for document lists', options.path, options.index, this.spec.title).withHelpUrl(_SerializeError.HELP_URL.ID_REQUIRED);
    }

    if (!this.spec.options || !this.spec.options.filter) {
      throw new _SerializeError.SerializeError('`filter` is required for document lists', options.path, this.spec.id, this.spec.title).withHelpUrl(_SerializeError.HELP_URL.FILTER_REQUIRED);
    }

    return _objectSpread({}, super.serialize(options), {
      type: 'documentList',
      schemaTypeName: this.spec.schemaTypeName,
      child: this.spec.child || resolveEditorChildForItem,
      options: _objectSpread({}, this.spec.options, {
        filter: validateFilter(this.spec, options)
      })
    });
  }

  clone(withSpec) {
    var builder = new DocumentListBuilder();
    builder.spec = _objectSpread({}, this.spec, {}, withSpec || {});
    return builder;
  }

}

exports.DocumentListBuilder = DocumentListBuilder;