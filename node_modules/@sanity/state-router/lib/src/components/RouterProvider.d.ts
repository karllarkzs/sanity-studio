import React from 'react';
import PropTypes from 'prop-types';
import { Router } from '../types';
import { InternalRouter, NavigateOptions, RouterProviderContext, RouterState } from './types';
declare type Props = {
    onNavigate: (nextPath: string, options?: NavigateOptions) => void;
    router: Router;
    state: RouterState;
    children: React.ReactNode;
};
export default class RouterProvider extends React.Component<Props> {
    static childContextTypes: {
        __internalRouter: PropTypes.Requireable<object>;
    };
    __internalRouter: InternalRouter;
    _state: RouterState;
    constructor(props: Props);
    navigateUrl: (url: string, options?: NavigateOptions) => void;
    navigateState: (nextState: Object, options?: NavigateOptions) => void;
    navigateIntent: (intentName: string, params?: Object, options?: NavigateOptions) => void;
    getState: () => Object;
    resolvePathFromState: (state: Object) => string;
    resolveIntentLink: (intentName: string, params?: Object) => string;
    getChildContext(): RouterProviderContext;
    UNSAFE_componentWillReceiveProps(nextProps: Props): void;
    render(): React.ReactNode;
}
export {};
